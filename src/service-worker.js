import { precacheAndRoute } from 'workbox-precaching';
// // // manifest import will be autogenerated by webpack
precacheAndRoute(self.__WB_MANIFEST || []);
/////////////////////// OR ///////////////////////////////////////

/* eslint-disable indent */
/* eslint-disable camelcase */
/* eslint-disable no-undef */
// Last Update Source 1398/11/06
//  #region  **************************************Cache Files*****************************************
const cacheName = 'v12' // AND Panel-Right.vue in CacheName may edited

// Call Install Event
self.addEventListener('install', e => {
  console.log('Service Worker: Installed')
}) // addEventListener

// Call Activated Event
self.addEventListener('activate', e => {
  console.log('Service Worker: Activated')
  // Remove unwanted caches
  e.waitUntil(
    caches.keys().then(cacheName => {
      return Promise.all(
        cacheName.map(cache => {
          if (cache !== cacheName) {
            console.log('Service Worker : Cleareing old cache')
            return caches.delete(cache);
          }
        })
      )
    })
  )
})

// Call Fetch Event
self.addEventListener('fetch', e => {
  // eslint-disable-next-line no-unexpected-multiline
  console.log('Service Worker: Fetching')
  let urls = [
    'https://site.ir/index.php'
  ]
  // console.log(`Service Worker: ${e.request.url.indexOf(urls)}`)
  // console.log(`Service Worker: ${e.request.url}`)
  if (e.request.url.indexOf(urls) > -1) {
    console.log('request Online first');
    return e.respondWith(
      fetch(e.request)
      .then(res => {
      //     res.json()
      //     .then(json_parse => { })
      //    }) // .then(json_parse**

    return caches.open(cacheName)
        .then(cache => {
        // Add response to cache
        cache.put(e.request, res.clone());
        return res;
        })
    }) // then(res**
        // eslint-disable-next-line handle-callback-err
        .catch(err => {
          return caches.match(e.request);
        }) // catch**
    )
  } else { // **************************************************************** */
    e.respondWith(
      fetch(e.request)
        .then(res => {
          //  Make copy/clone of Response
          const resClone = res.clone();
          // Open cache
          caches
            .open(cacheName)
            .then(cache => {
            // Add response to cache
            // console.log('@@@@@@@'  , e.request.method);
            if(e.request.method=="GET"){
              cache.put(e.request, resClone);
            }

            })
          return res;
        // eslint-disable-next-line handle-callback-err
        }).catch(err => caches.match(e.request).then(res => res))
    ) // respondwith
  }// else
})// fetch
//  #endregion  **************************************End Cache Files*****************************************

